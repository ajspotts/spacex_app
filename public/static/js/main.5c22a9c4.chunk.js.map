{"version":3,"sources":["spacex_logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","dist_default","format","react_router_dom","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Fragment","react_apollo_esm","query","loading","error","data","console","log","launches","map","Component","LAUNCH_QUERY","Launch_templateObject","Launch","props","match","params","parseInt","react","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c22a9c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex_logo.a28e4541.png\";","import React from 'react';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success} }) {\n  return (\n    <div className=\"launch-item card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>Mission: {' '}\n            <span className={launch_success ? 'text-success' : 'text-danger'}>\n            {mission_name}\n            </span>\n          </h4>\n          <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary mt-4\">Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3 mb-4\">\n      <h5>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </h5>\n      <h5>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Failure\n      </h5>\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n            return (\n              <>\n                {data.launches.map(launch => (\n                  <LaunchItem key={launch.flight_number} launch={launch} />\n                ))}\n              </>\n            );\n          }}\n        </Query>\n      </>\n    );\n  }\n}\n\nexport default Launches;","import React, { Component, Fragment } from 'react';\nimport Moment from 'react-moment';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      mission_name\n      flight_number\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport class Launch extends Component {\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n            console.log(data);\n\n            const {\n              mission_name,\n              flight_number,\n              launch_year,\n              launch_success,\n              launch_date_local,\n              rocket: { rocket_id, rocket_name, rocket_type }\n            } = data.launch;\n\n            return (\n              <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-dark\">Mission:</span> {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"launch-item list-group-item\">\n                    Flight Number: {flight_number}\n                  </li>\n                  <li className=\"launch-item list-group-item\">\n                    Launch Year: {launch_year}\n                  </li>\n                  <li className=\"launch-item list-group-item\">\n                    Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment>\n                  </li>\n                  <li className=\"launch-item list-group-item\">\n                    Launch Successful:{' '}\n                    <span\n                      className={launch_success ? 'text-success' : 'text-danger'}>\n                      {launch_success ? 'Yes' : 'No'}\n                    </span>\n                  </li>\n                </ul>\n\n                <h4 className=\"my-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"launch-item list-group-item\">Rocket ID: {rocket_id}</li>\n                  <li className=\"launch-item list-group-item\">\n                    Rocket Name: {rocket_name}\n                  </li>\n                  <li className=\"launch-item list-group-item\">\n                    Rocket Type: {rocket_type}\n                  </li>\n                </ul>\n                <hr />\n                <Link to=\"/\" className=\"btn btn-secondary\">\n                  Back\n                </Link>\n              </div>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launch;\n\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport logo from './spacex_logo.png';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"SpaceX\" style={{ width: 350, display: 'block', margin: 'auto' }}/>\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}